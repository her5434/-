
import socket
import threading
import tkinter as tk
from tkinter import scrolledtext, simpledialog, messagebox, ttk
from datetime import datetime
import random
import platform

# –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–º–∞–π–ª—ã
EMOJIS = [
    "üôÇ", "üòÄ", "üòÇ", "üòç", "üò¢", "üòé",
    "üòú", "ü§î", "ü•≥", "üò°", "üò±", "üòá"
]

# –®—É—Ç–∫–∏ –ø—Ä–æ 2017 –≥–æ–¥
JOKES_2017 = [
    "–ü–æ—á–µ–º—É 2017 –±—ã–ª —Ö—É–¥—à–∏–º –≥–æ–¥–æ–º –¥–ª—è –º—É–∑—ã–∫–∏? –í—Å–µ –ø–µ—Ä–µ–ø–µ–≤–∞–ª–∏ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –ø–µ—Å–Ω–∏!",
    "–ö–∞–∫ 2017 –≥–æ–¥ —Å–º–æ—Ç—Ä–µ–ª –Ω–∞ –¥—Ä—É–≥–∏–µ –≥–æ–¥–∞? '–Ø –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–∏–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∞!'",
    "–ü–æ—á–µ–º—É –≤ 2017 –≥–æ–¥—É —Ç–∞–∫ –º–Ω–æ–≥–æ –º–µ–º–æ–≤? –ü–æ—Ç–æ–º—É —á—Ç–æ –ª—é–¥–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–Ω–∞–ª–∏, –∫–∞–∫ —ç—Ç–æ –ø–µ—Ä–µ–∂–∏—Ç—å!",
    "–ö–∞–∫—É—é –º–∞—à–∏–Ω—É –∫—É–ø–∏–ª 2017 –≥–æ–¥? '–ú–∞—Ä—Ç–∏–Ω –ú–∞—Ä—Ç–∏–Ω'-–Ω–∞–¥–æ—É–º! –ü–æ–Ω–∏–º–∞–µ—Ç–µ, —ç—Ç–æ –æ—Ç—Å—ã–ª–∫–∞ –∫ —Ç–æ–º—É, —á—Ç–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã—à–ª–æ –º–Ω–æ–≥–æ —Ñ–∏–ª—å–º–æ–≤!",
    "–ü–æ—á–µ–º—É 2017 –≥–æ–¥ –±—ã–ª —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–º? –ü–æ—Ç–æ–º—É —á—Ç–æ –º—ã –≤—Å–µ –∂–¥–∞–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞ '–ò–≥—Ä—ã –ø—Ä–µ—Å—Ç–æ–ª–æ–≤'!"
]

# –®—É—Ç–∫–∏ –ø—Ä–æ Linux –∏ Windows
JOKES_LINUX_WINDOWS = [
    "–ü–æ—á–µ–º—É –ª–∏–Ω—É–∫—Å–µ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –∏–≥—Ä–∞—Ç—å –≤ –ø—Ä—è—Ç–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ —Ö–æ—Å—Ç–∞ –Ω–∞–π—Ç–∏ —Ç—Ä—É–¥–Ω–æ!",
    "–ü–æ—á–µ–º—É Windows –ª—É—á—à–µ Linux? –ü–æ—Ç–æ–º—É —á—Ç–æ Windows –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –º–∞—à–∏–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏!",
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ Windows? –ü–æ—Ç–æ–º—É —á—Ç–æ –∏–º —Å–ª–∏—à–∫–æ–º —Ç—Ä—É–¥–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫–∏!",
    "–ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Windows –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Linux? –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Windows –Ω–µ –∑–Ω–∞–µ—Ç, –∫–∞–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –º—ã—à–∏!",
    "–ü–æ—á–µ–º—É Linux –ª—É—á—à–µ Windows? –ü–æ—Ç–æ–º—É —á—Ç–æ Linux –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '–í—ã —É–≤–µ—Ä–µ–Ω—ã?' –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç!"
]

class ChatClient:
    def __init__(self, host='127.0.0.1', port=5555):
        self.root = tk.Tk()
        self.root.title("–ß–∞—Ç")
        self.root.geometry("400x600")
        self.root.configure(bg="#eaeaea")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        os_info = platform.system() + " " + platform.release()
        os_label = ttk.Label(self.root, text=f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {os_info}", font=("Arial", 12))
        os_label.pack(pady=5)

        # –°—Ç–∏–ª–∏
        self.style = ttk.Style()
        self.style.theme_use("clam")

        # –°—á—ë—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_count_label = ttk.Label(self.root, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ: 0", font=("Arial", 12))
        self.user_count_label.pack(pady=5)

        # –ß–∞—Ç
        self.font_size = 10
        self.chat_area = scrolledtext.ScrolledText(self.root, state='disabled', wrap=tk.WORD,
                                                    bg="#f9f9f9", font=("Arial", self.font_size), fg="black",
                                                    borderwidth=0)
        self.chat_area.pack(padx=10, pady=10, fill='both', expand=True)

        # –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞
        input_frame = ttk.Frame(self.root)
        input_frame.pack(padx=10, pady=5, fill='x')

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.message_entry = ttk.Entry(input_frame)
        self.message_entry.pack(side=tk.LEFT, fill='x', expand=True)

        # –ö–Ω–æ–ø–∫–∏
        emoji_button = ttk.Button(input_frame, text="üòä", command=self.insert_emoji, width=2)
        emoji_button.pack(side=tk.LEFT)
        
        time_button = ttk.Button(input_frame, text="–í—Ä–µ–º—è", command=self.show_time, width=10)
        time_button.pack(side=tk.LEFT)
        
        self.send_button = ttk.Button(input_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=self.send_message, width=10)
        self.send_button.pack(side=tk.LEFT)
        
        program_info_button = ttk.Button(input_frame, text="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_info)
        program_info_button.pack(side=tk.LEFT)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        theme_button = ttk.Button(input_frame, text="–í—ã–±–æ—Ä —Ç–µ–º—ã", command=self.change_theme)
        theme_button.pack(side=tk.RIGHT)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_button = ttk.Button(input_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.open_settings)
        settings_button.pack(side=tk.RIGHT)

        # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —à—É—Ç–æ–∫
        joke_button = ttk.Button(input_frame, text="–®—É—Ç–∫–∏", command=self.open_joke_window)
        joke_button.pack(side=tk.RIGHT)

        # –ó–∞–ø—Ä–æ—Å –Ω–∏–∫–∞
        self.nickname = self.get_nickname()
        if not self.nickname:
            self.nickname = "–ì–æ—Å—Ç—å"

        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.connect((host, port))

        self.user_list = []  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        threading.Thread(target=self.receive_messages, daemon=True).start()

        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()

    def open_joke_window(self):
        joke_window = tk.Toplevel(self.root)
        joke_window.title("–®—É—Ç–∫–∏")
        joke_window.geometry("300x400")

        # –û–∫–Ω–æ –¥–ª—è —à—É—Ç–æ–∫ —Å –æ—Ä–∞–Ω–∂–µ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
        joke_area = scrolledtext.ScrolledText(joke_window, state='disabled', wrap=tk.WORD,
                                                bg="#f9f9f9", font=("Arial", 10), fg="orange",
                                                borderwidth=0)
        joke_area.pack(padx=10, pady=10, fill='both', expand=True)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —à—É—Ç–æ–∫
        joke_2017_button = ttk.Button(joke_window, text="–®—É—Ç–∫–∞ –ø—Ä–æ 2017", command=lambda: self.display_joke(joke_area, JOKES_2017))
        joke_2017_button.pack(pady=5)
        
        joke_linux_windows_button = ttk.Button(joke_window, text="–®—É—Ç–∫–∞ –ø—Ä–æ Linux/Windows", command=lambda: self.display_joke(joke_area, JOKES_LINUX_WINDOWS))
        joke_linux_windows_button.pack(pady=5)

    def display_joke(self, joke_area, jokes):
        joke = random.choice(jokes)
        joke_area.configure(state='normal')
        joke_area.insert(tk.END, f"{joke}\n")
        joke_area.configure(state='disabled')
        joke_area.see(tk.END)

    def show_info(self):
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", "–ß–∞—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è.\n–í–µ—Ä—Å–∏—è 1.0")

    def change_theme(self):
        themes = [
            ("–°–≤–µ—Ç–ª–∞—è", "#ffffff", "#eaeaea", "#f9f9f9", "black"),
            ("–¢—ë–º–Ω–∞—è", "#333333", "#444444", "#555555", "white"),
            ("–ó–µ–ª—ë–Ω–∞—è", "#4caf50", "#388e3c", "#e8f5e9", "white"),
            ("–°–∏–Ω—è—è", "#2196f3", "#1976d2", "#bbdefb", "white"),
            ("–ö—Ä–∞—Å–Ω–∞—è", "#f44336", "#d32f2f", "#ffcdd2", "white"),
            ("–°–µ—Ä–∞—è", "#9e9e9e", "#757575", "#efefef", "black"),
        ]
        theme_names = [theme[0] for theme in themes]
        selected_theme = simpledialog.askstring("–í—ã–±–æ—Ä —Ç–µ–º—ã", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã: \n(–°–≤–µ—Ç–ª–∞—è, –¢—ë–º–Ω–∞—è, –ó–µ–ª—ë–Ω–∞—è, –°–∏–Ω—è—è, –ö—Ä–∞—Å–Ω–∞—è, –°–µ—Ä–∞—è)")

        for theme in themes:
            if selected_theme and selected_theme.lower() == theme[0].lower():
                self.style.configure("TButton", background=theme[1], foreground=theme[4])
                self.root.configure(bg=theme[2])
                self.chat_area.configure(bg=theme[3], fg=theme[4], font=("Arial", self.font_size))
                return
        
        messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–∞–∫–æ–π —Ç–µ–º—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    def open_settings(self):
        settings_window = tk.Toplevel(self.root)
        settings_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_window.geometry("300x400")

        # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        self.font_size = simpledialog.askinteger("–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞", "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:", initialvalue=10)

        font_size_label = ttk.Label(settings_window, text="–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:")
        font_size_label.pack(pady=10)

        font_size_entry = ttk.Entry(settings_window)
        font_size_entry.insert(0, str(self.font_size))
        font_size_entry.pack(pady=10)

        apply_button = ttk.Button(settings_window, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=lambda: self.apply_font_size(font_size_entry.get()))
        apply_button.pack(pady=10)

        # –í—ã–±–æ—Ä —Å—Ç–∏–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ–∫–æ–Ω
        ttk.Label(settings_window, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–æ–Ω:").pack(pady=10)

        self.header_style_var = tk.StringVar(value="–û–±—ã—á–Ω—ã–π")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ttk.Radiobutton(settings_window, text="–û–±—ã—á–Ω—ã–π", value="–û–±—ã—á–Ω—ã–π", variable=self.header_style_var, command=self.change_header_style).pack(anchor=tk.W)
        ttk.Radiobutton(settings_window, text="Aero", value="Aero", variable=self.header_style_var, command=self.change_header_style).pack(anchor=tk.W)

    def change_header_style(self):
        selected_style = self.header_style_var.get()
        if selected_style == "Aero":
            self.root.wm_attributes("-alpha", 0.9)  # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (Aero)
        else:
            self.root.wm_attributes("-alpha", 1.0)  # –û–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å

    def apply_font_size(self, size):
        try:
            self.font_size = int(size)
            self.chat_area.configure(font=("Arial", self.font_size))
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø—Ä–∏–º–µ–Ω—ë–Ω!")
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

    def get_nickname(self):
        nickname = simpledialog.askstring("–ù–∏–∫–Ω–µ–π–º", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:", parent=self.root)
        if nickname:
            return nickname.strip()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∏–∫–Ω–µ–π–º –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
            self.root.destroy()
            return None

    def send_message(self):
        message = self.message_entry.get()
        if message:
            timestamp = datetime.now().strftime("[%H:%M:%S]")  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
            full_message = f"{timestamp} {self.nickname}: {message}"
            self.socket.send(full_message.encode('utf-8'))
            self.display_message(full_message)
            self.message_entry.delete(0, tk.END)

    def insert_emoji(self):
        emoji_window = tk.Toplevel(self.root)
        emoji_window.title("–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª")
        emoji_window.geometry("200x300")

        for emoji in EMOJIS:
            button = ttk.Button(emoji_window, text=emoji, command=lambda e=emoji: self.add_emoji_to_entry(e), width=2)
            button.pack(pady=5)

    def add_emoji_to_entry(self, emoji):
        current_text = self.message_entry.get()
        self.message_entry.delete(0, tk.END)
        self.message_entry.insert(0, current_text + emoji)

    def show_time(self):
        current_time = datetime.now().strftime("%H:%M:%S")
        self.display_message(f"[–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")

    def display_message(self, message):
        self.chat_area.configure(state='normal')
        self.chat_area.insert(tk.END, message + '\n')
        self.chat_area.configure(state='disabled')
        self.chat_area.see(tk.END)

    def update_user_count(self):
        self.user_count_label.config(text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ: {len(self.user_list)}")

    def receive_messages(self):
        while True:
            try:
                message = self.socket.recv(4096)
                decoded_message = message.decode('utf-8')
                if decoded_message.startswith("USER_LIST:"):
                    self.user_list = decoded_message.split(":")[1].split(",")
                    self.update_user_count()
                else:
                    self.display_message(decoded_message)
            except Exception:
                break

    def on_closing(self):
        self.socket.close()
        self.root.quit()

if __name__ == "__main__":
    ChatClient()
